{"version":3,"file":"WrapFunctionBody.js","sourceRoot":"","sources":["WrapFunctionBody.ts"],"names":[],"mappings":"AAMA;IAAA;QACI,SAAI,GAAW,kBAAkB,CAAA;QACjC,gBAAW,GAAW,kDAAkD,CAAA;IAwB5E,CAAC;IAtBG,+BAAI,GAAJ,UAAK,OAAgB;QACnB,IAAI,GAAG,GAAyB,OAAO,CAAC,OAAO,EAAE,CAAC,oBAAoB,EAAE,CAAA;QAQxE,IAAI,OAAO,GAAG,qGAAiG,CAAA;QAE/G,GAAG,CAAC,IAAI,CAAM,OAAO,EAAE,OAAO,EAAE,UAAA,YAAY;YAC1C,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,CAAA;YAEjC,YAAY,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;YAChE,YAAY,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,iBAAiB,GAAG,YAAY,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,GAAG,GAAG,CAAC,CAAA;YAGrG,OAAO,CAAC,GAAG,CAAC,gBAAc,YAAY,CAAC,cAAc,EAAE,CAAC,KAAK,EAAI,CAAC,CAAA;QACpE,CAAC,CAAC,CAAA;IACN,CAAC;IAEH,uBAAC;AAAD,CAAC,AA1BD,IA0BC;AAEU,QAAA,MAAM,GAAG,IAAI,gBAAgB,EAAE,CAAA","sourcesContent":["import {Project,File} from '@atomist/rug/model/Core'\nimport {ProjectEditor} from '@atomist/rug/operations/ProjectEditor'\nimport {PathExpression,TypeProvider} from '@atomist/rug/tree/PathExpression'\nimport {PathExpressionEngine} from '@atomist/rug/tree/PathExpression'\nimport {Match} from '@atomist/rug/tree/PathExpression'\n\nclass WrapFunctionBody implements ProjectEditor {\n    name: string = \"WrapFunctionBody\"\n    description: string = \"just put positionedStructure() around my parsers\"\n\n    edit(project: Project) {\n      let eng: PathExpressionEngine = project.context().pathExpressionEngine()\n\n      /*\n      I'm looking for functions that return Parser[SyntaxNode]\n      I expect them to have an infix application as the function body\n      Change their type to Parser[PositionedSyntaxNode]\n      and wrap their body in a call to positionedNode()\n      */\n      let targets = `//File()[@name=\"ElmParser.scala\"]/ScalaFile()//defnDef[/typeApply[@value=\"Parser[SyntaxNode]\"]]`\n\n      eng.with<any>(project, targets, defStatement => {\n        console.log(defStatement.value())\n\n        defStatement.typeApply().update(\"Parser[PositionedSyntaxNode]\");\n        defStatement.termApplyInfix().update(\"positionedNode(\" + defStatement.termApplyInfix().value() + \")\")\n\n\n        console.log(`something: ${defStatement.termApplyInfix().value()}`)\n      })\n  }\n\n}\n\nexport let editor = new WrapFunctionBody()\n"]}