{"version":3,"file":"UpgradeScalaTestAssertions.js","sourceRoot":"","sources":["UpgradeScalaTestAssertions.ts"],"names":[],"mappings":"AAUA;IAAA;QACI,SAAI,GAAW,4BAA4B,CAAA;QAC3C,gBAAW,GAAW,+BAA+B,CAAA;IA+BzD,CAAC;IA7BG,yCAAI,GAAJ,UAAK,OAAgB;QACnB,IAAI,GAAG,GAAyB,OAAO,CAAC,OAAO,EAAE,CAAC,oBAAoB,EAAE,CAAA;QAcxE,IAAI,YAAY,GAAG,sFAAsF,CAAA;QAEzG,GAAG,CAAC,IAAI,CAAM,OAAO,EAAE,YAAY,EAAE,UAAA,UAAU;YAC7C,IAAI,UAAU,GAAG,UAAU,CAAC,UAAU,EAAE,CAAA;YACxC,IAAI,SAAS,GAAG,UAAU,CAAC,SAAS,EAAE,CAAA;YACtC,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;mBAC9E,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvE,IAAI,QAAQ,GAAG,YAAU,UAAU,CAAC,KAAK,EAAE,aAAQ,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,MAAG,CAAA;gBACrF,OAAO,CAAC,GAAG,CAAC,gBAAc,UAAU,CAAC,KAAK,EAAE,gBAAW,QAAQ,MAAG,CAAC,CAAA;gBACnE,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;YAC7B,CAAC;QACH,CAAC,CAAC,CAAA;IACN,CAAC;IAEH,iCAAC;AAAD,CAAC,AAjCD,IAiCC;AAEU,QAAA,MAAM,GAAG,IAAI,0BAA0B,EAAE,CAAA","sourcesContent":["import {Project,File} from '@atomist/rug/model/Core'\nimport {ProjectEditor} from '@atomist/rug/operations/ProjectEditor'\nimport {PathExpression,TypeProvider} from '@atomist/rug/tree/PathExpression'\nimport {PathExpressionEngine} from '@atomist/rug/tree/PathExpression'\nimport {Match} from '@atomist/rug/tree/PathExpression'\n\n/**\n * Update ScalaTest assertions of the form \"a should be(b)\" or a \"should equal(b)\"\n * with \"assert(a === b)\" to get better error messages.\n */\nclass UpgradeScalaTestAssertions implements ProjectEditor {\n    name: string = \"UpgradeScalaTestAssertions\"\n    description: string = \"Upgrades ScalaTest assertions\"\n\n    edit(project: Project) {\n      let eng: PathExpressionEngine = project.context().pathExpressionEngine()\n\n      /*\n      We're matching a structure like this:\n\n      TermApplyInfix:[MutableContainer]\n              TermSelect:[MutableContainer]\n                TermName:[scenarios]\n                TermName:[size]\n              TermName:[should]\n              TermApply:[MutableContainer]\n                TermName:[be]\n                Lit:[2]\n      */\n      let oldAssertion = `/src/test/scala//ScalaFile()//termApplyInfix[/termName[@value='should']][termSelect]`\n\n      eng.with<any>(project, oldAssertion, shouldTerm => {\n        let termSelect = shouldTerm.termSelect()\n        let termApply = shouldTerm.termApply()\n        if (termApply != null && [\"be\", \"equal\"].indexOf(termApply.termName().value()) > -1\n          && [\"empty\", \"defined\"].indexOf(termApply.children()[1].value()) < 0) {\n          let newValue = `assert(${termSelect.value()} === ${termApply.children()[1].value()})`\n          console.log(`Replacing [${shouldTerm.value()}] with [${newValue}]`)\n          shouldTerm.update(newValue)\n        }\n      })\n  }\n\n}\n\nexport let editor = new UpgradeScalaTestAssertions()\n"]}